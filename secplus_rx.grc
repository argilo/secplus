options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: secplus_rx
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: decim1
  id: variable
  parameters:
    comment: ''
    value: '2'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 204]
    rotation: 0
    state: enabled
- name: decim2
  id: variable
  parameters:
    comment: ''
    value: '50'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 268]
    rotation: 0
    state: enabled
- name: freq
  id: variable_qtgui_chooser
  parameters:
    comment: ''
    gui_hint: ''
    label: Frequency
    label0: 310 MHz
    label1: 315 MHz
    label2: 390 MHz
    label3: ''
    label4: ''
    labels: '[]'
    num_opts: '3'
    option0: '310150000'
    option1: '315150000'
    option2: '390150000'
    option3: '3'
    option4: '4'
    options: '[0, 1, 2]'
    orient: Qt.QHBoxLayout
    type: int
    value: '315150000'
    widget: radio_buttons
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [152, 332.0]
    rotation: 0
    state: enabled
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '2000000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 76]
    rotation: 0
    state: enabled
- name: threshold
  id: variable
  parameters:
    comment: ''
    value: '0.05'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 332]
    rotation: 0
    state: enabled
- name: blocks_complex_to_mag_0
  id: blocks_complex_to_mag
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 184.0]
    rotation: 0
    state: enabled
- name: blocks_rotator_cc_0
  id: blocks_rotator_cc
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_inc: 2 * math.pi * -300e3 / samp_rate
    tag_inc_update: 'False'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [416, 168.0]
    rotation: 0
    state: enabled
- name: import_0
  id: import
  parameters:
    alias: ''
    comment: ''
    imports: import math
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 404]
    rotation: 0
    state: enabled
- name: osmosdr_source_0
  id: osmosdr_source
  parameters:
    affinity: ''
    alias: ''
    ant0: ''
    ant1: ''
    ant10: ''
    ant11: ''
    ant12: ''
    ant13: ''
    ant14: ''
    ant15: ''
    ant16: ''
    ant17: ''
    ant18: ''
    ant19: ''
    ant2: ''
    ant20: ''
    ant21: ''
    ant22: ''
    ant23: ''
    ant24: ''
    ant25: ''
    ant26: ''
    ant27: ''
    ant28: ''
    ant29: ''
    ant3: ''
    ant30: ''
    ant31: ''
    ant4: ''
    ant5: ''
    ant6: ''
    ant7: ''
    ant8: ''
    ant9: ''
    args: ''
    bb_gain0: '32'
    bb_gain1: '20'
    bb_gain10: '20'
    bb_gain11: '20'
    bb_gain12: '20'
    bb_gain13: '20'
    bb_gain14: '20'
    bb_gain15: '20'
    bb_gain16: '20'
    bb_gain17: '20'
    bb_gain18: '20'
    bb_gain19: '20'
    bb_gain2: '20'
    bb_gain20: '20'
    bb_gain21: '20'
    bb_gain22: '20'
    bb_gain23: '20'
    bb_gain24: '20'
    bb_gain25: '20'
    bb_gain26: '20'
    bb_gain27: '20'
    bb_gain28: '20'
    bb_gain29: '20'
    bb_gain3: '20'
    bb_gain30: '20'
    bb_gain31: '20'
    bb_gain4: '20'
    bb_gain5: '20'
    bb_gain6: '20'
    bb_gain7: '20'
    bb_gain8: '20'
    bb_gain9: '20'
    bw0: 1e6
    bw1: '0'
    bw10: '0'
    bw11: '0'
    bw12: '0'
    bw13: '0'
    bw14: '0'
    bw15: '0'
    bw16: '0'
    bw17: '0'
    bw18: '0'
    bw19: '0'
    bw2: '0'
    bw20: '0'
    bw21: '0'
    bw22: '0'
    bw23: '0'
    bw24: '0'
    bw25: '0'
    bw26: '0'
    bw27: '0'
    bw28: '0'
    bw29: '0'
    bw3: '0'
    bw30: '0'
    bw31: '0'
    bw4: '0'
    bw5: '0'
    bw6: '0'
    bw7: '0'
    bw8: '0'
    bw9: '0'
    clock_source0: ''
    clock_source1: ''
    clock_source2: ''
    clock_source3: ''
    clock_source4: ''
    clock_source5: ''
    clock_source6: ''
    clock_source7: ''
    comment: ''
    corr0: '0'
    corr1: '0'
    corr10: '0'
    corr11: '0'
    corr12: '0'
    corr13: '0'
    corr14: '0'
    corr15: '0'
    corr16: '0'
    corr17: '0'
    corr18: '0'
    corr19: '0'
    corr2: '0'
    corr20: '0'
    corr21: '0'
    corr22: '0'
    corr23: '0'
    corr24: '0'
    corr25: '0'
    corr26: '0'
    corr27: '0'
    corr28: '0'
    corr29: '0'
    corr3: '0'
    corr30: '0'
    corr31: '0'
    corr4: '0'
    corr5: '0'
    corr6: '0'
    corr7: '0'
    corr8: '0'
    corr9: '0'
    dc_offset_mode0: '0'
    dc_offset_mode1: '0'
    dc_offset_mode10: '0'
    dc_offset_mode11: '0'
    dc_offset_mode12: '0'
    dc_offset_mode13: '0'
    dc_offset_mode14: '0'
    dc_offset_mode15: '0'
    dc_offset_mode16: '0'
    dc_offset_mode17: '0'
    dc_offset_mode18: '0'
    dc_offset_mode19: '0'
    dc_offset_mode2: '0'
    dc_offset_mode20: '0'
    dc_offset_mode21: '0'
    dc_offset_mode22: '0'
    dc_offset_mode23: '0'
    dc_offset_mode24: '0'
    dc_offset_mode25: '0'
    dc_offset_mode26: '0'
    dc_offset_mode27: '0'
    dc_offset_mode28: '0'
    dc_offset_mode29: '0'
    dc_offset_mode3: '0'
    dc_offset_mode30: '0'
    dc_offset_mode31: '0'
    dc_offset_mode4: '0'
    dc_offset_mode5: '0'
    dc_offset_mode6: '0'
    dc_offset_mode7: '0'
    dc_offset_mode8: '0'
    dc_offset_mode9: '0'
    freq0: freq - 300e3
    freq1: 100e6
    freq10: 100e6
    freq11: 100e6
    freq12: 100e6
    freq13: 100e6
    freq14: 100e6
    freq15: 100e6
    freq16: 100e6
    freq17: 100e6
    freq18: 100e6
    freq19: 100e6
    freq2: 100e6
    freq20: 100e6
    freq21: 100e6
    freq22: 100e6
    freq23: 100e6
    freq24: 100e6
    freq25: 100e6
    freq26: 100e6
    freq27: 100e6
    freq28: 100e6
    freq29: 100e6
    freq3: 100e6
    freq30: 100e6
    freq31: 100e6
    freq4: 100e6
    freq5: 100e6
    freq6: 100e6
    freq7: 100e6
    freq8: 100e6
    freq9: 100e6
    gain0: '30'
    gain1: '10'
    gain10: '10'
    gain11: '10'
    gain12: '10'
    gain13: '10'
    gain14: '10'
    gain15: '10'
    gain16: '10'
    gain17: '10'
    gain18: '10'
    gain19: '10'
    gain2: '10'
    gain20: '10'
    gain21: '10'
    gain22: '10'
    gain23: '10'
    gain24: '10'
    gain25: '10'
    gain26: '10'
    gain27: '10'
    gain28: '10'
    gain29: '10'
    gain3: '10'
    gain30: '10'
    gain31: '10'
    gain4: '10'
    gain5: '10'
    gain6: '10'
    gain7: '10'
    gain8: '10'
    gain9: '10'
    gain_mode0: 'False'
    gain_mode1: 'False'
    gain_mode10: 'False'
    gain_mode11: 'False'
    gain_mode12: 'False'
    gain_mode13: 'False'
    gain_mode14: 'False'
    gain_mode15: 'False'
    gain_mode16: 'False'
    gain_mode17: 'False'
    gain_mode18: 'False'
    gain_mode19: 'False'
    gain_mode2: 'False'
    gain_mode20: 'False'
    gain_mode21: 'False'
    gain_mode22: 'False'
    gain_mode23: 'False'
    gain_mode24: 'False'
    gain_mode25: 'False'
    gain_mode26: 'False'
    gain_mode27: 'False'
    gain_mode28: 'False'
    gain_mode29: 'False'
    gain_mode3: 'False'
    gain_mode30: 'False'
    gain_mode31: 'False'
    gain_mode4: 'False'
    gain_mode5: 'False'
    gain_mode6: 'False'
    gain_mode7: 'False'
    gain_mode8: 'False'
    gain_mode9: 'False'
    if_gain0: '32'
    if_gain1: '20'
    if_gain10: '20'
    if_gain11: '20'
    if_gain12: '20'
    if_gain13: '20'
    if_gain14: '20'
    if_gain15: '20'
    if_gain16: '20'
    if_gain17: '20'
    if_gain18: '20'
    if_gain19: '20'
    if_gain2: '20'
    if_gain20: '20'
    if_gain21: '20'
    if_gain22: '20'
    if_gain23: '20'
    if_gain24: '20'
    if_gain25: '20'
    if_gain26: '20'
    if_gain27: '20'
    if_gain28: '20'
    if_gain29: '20'
    if_gain3: '20'
    if_gain30: '20'
    if_gain31: '20'
    if_gain4: '20'
    if_gain5: '20'
    if_gain6: '20'
    if_gain7: '20'
    if_gain8: '20'
    if_gain9: '20'
    iq_balance_mode0: '0'
    iq_balance_mode1: '0'
    iq_balance_mode10: '0'
    iq_balance_mode11: '0'
    iq_balance_mode12: '0'
    iq_balance_mode13: '0'
    iq_balance_mode14: '0'
    iq_balance_mode15: '0'
    iq_balance_mode16: '0'
    iq_balance_mode17: '0'
    iq_balance_mode18: '0'
    iq_balance_mode19: '0'
    iq_balance_mode2: '0'
    iq_balance_mode20: '0'
    iq_balance_mode21: '0'
    iq_balance_mode22: '0'
    iq_balance_mode23: '0'
    iq_balance_mode24: '0'
    iq_balance_mode25: '0'
    iq_balance_mode26: '0'
    iq_balance_mode27: '0'
    iq_balance_mode28: '0'
    iq_balance_mode29: '0'
    iq_balance_mode3: '0'
    iq_balance_mode30: '0'
    iq_balance_mode31: '0'
    iq_balance_mode4: '0'
    iq_balance_mode5: '0'
    iq_balance_mode6: '0'
    iq_balance_mode7: '0'
    iq_balance_mode8: '0'
    iq_balance_mode9: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    num_mboards: '1'
    sample_rate: samp_rate
    sync: sync
    time_source0: ''
    time_source1: ''
    time_source2: ''
    time_source3: ''
    time_source4: ''
    time_source5: ''
    time_source6: ''
    time_source7: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [136, 76.0]
    rotation: 0
    state: enabled
- name: qtgui_time_sink_x_0
  id: qtgui_time_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'False'
    axislabels: 'True'
    color1: blue
    color10: dark blue
    color2: red
    color3: green
    color4: black
    color5: cyan
    color6: magenta
    color7: yellow
    color8: dark red
    color9: dark green
    comment: ''
    ctrlpanel: 'False'
    entags: 'True'
    grid: 'False'
    gui_hint: ''
    label1: ''
    label10: ''
    label2: ''
    label3: ''
    label4: ''
    label5: ''
    label6: ''
    label7: ''
    label8: ''
    label9: ''
    legend: 'True'
    marker1: '-1'
    marker10: '-1'
    marker2: '-1'
    marker3: '-1'
    marker4: '-1'
    marker5: '-1'
    marker6: '-1'
    marker7: '-1'
    marker8: '-1'
    marker9: '-1'
    name: '""'
    nconnections: '1'
    size: 100000 // decim1 // decim2
    srate: samp_rate // decim1 // decim2
    stemplot: 'False'
    style1: '1'
    style10: '1'
    style2: '1'
    style3: '1'
    style4: '1'
    style5: '1'
    style6: '1'
    style7: '1'
    style8: '1'
    style9: '1'
    tr_chan: '0'
    tr_delay: '0'
    tr_level: threshold
    tr_mode: qtgui.TRIG_MODE_AUTO
    tr_slope: qtgui.TRIG_SLOPE_POS
    tr_tag: '""'
    type: float
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    ylabel: Amplitude
    ymax: '2'
    ymin: '0'
    yunit: '""'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 420.0]
    rotation: 180
    state: enabled
- name: rational_resampler_xxx_0
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: decim1
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: ''
    type: ccc
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [648, 156.0]
    rotation: 0
    state: enabled
- name: rational_resampler_xxx_1
  id: rational_resampler_xxx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    decim: decim2
    fbw: '0'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    taps: '[1.0/decim2]*decim2'
    type: fff
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [792, 332.0]
    rotation: 180
    state: enabled
- name: secplus_decode
  id: epy_block
  parameters:
    _source_code: "#\n# Copyright 2016 Clayton Smith (argilo@gmail.com)\n#\n# This\
      \ file is part of secplus.\n#\n# secplus is free software: you can redistribute\
      \ it and/or modify\n# it under the terms of the GNU General Public License as\
      \ published by\n# the Free Software Foundation, either version 3 of the License,\
      \ or\n# (at your option) any later version.\n#\n# secplus is distributed in\
      \ the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even\
      \ the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\
      \  See the\n# GNU General Public License for more details.\n#\n# You should\
      \ have received a copy of the GNU General Public License\n# along with secplus.\
      \  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport numpy as np\nfrom\
      \ gnuradio import gr\nimport secplus\n\n\nclass blk(gr.sync_block):\n    \"\"\
      \"Decoder for Chamberlain garage door openers\"\"\"\n\n    def __init__(self,\
      \ samp_rate=10000, threshold=0.02):\n        gr.sync_block.__init__(\n     \
      \       self,\n            name='Security+ Decoder',\n\n            in_sig=[np.float32],\n\
      \            out_sig=[]\n        )\n        self.samp_rate = samp_rate\n   \
      \     self.threshold = threshold\n        self.last_sample = 0.0\n        self.last_rise\
      \ = 0\n        self.buffer = []\n        self.last_pair = []\n        self.pair\
      \ = []\n\n    def work(self, input_items, output_items):\n        for n, sample\
      \ in enumerate(input_items[0]):\n            current_sample = self.nitems_read(0)\
      \ + n\n            if self.last_sample < self.threshold <= sample:\n       \
      \         # rising edge\n                self.last_rise = current_sample\n \
      \           elif self.last_sample >= self.threshold > sample:\n            \
      \    # falling edge\n                on_samples = current_sample - self.last_rise\n\
      \                self.process_symbol(on_samples)\n            if current_sample\
      \ - self.last_rise > 3.25e-3 * self.samp_rate:\n                self.buffer\
      \ = []\n            self.last_sample = sample\n        return len(input_items[0])\n\
      \n    def process_symbol(self, on_samples):\n        if on_samples < 0.35e-3\
      \ * self.samp_rate:\n            self.buffer = []\n        elif on_samples <\
      \ 0.75e-3 * self.samp_rate:\n            self.buffer.append(0)\n        elif\
      \ on_samples < 1.25e-3 * self.samp_rate:\n            self.buffer.append(1)\n\
      \        elif on_samples < 1.75e-3 * self.samp_rate:\n            self.buffer.append(2)\n\
      \        else:\n            self.buffer = []\n\n        if len(self.buffer)\
      \ == 21:\n            self.process_buffer()\n            self.buffer = []\n\n\
      \    def process_buffer(self):\n        if self.buffer[0] == 0:\n          \
      \  self.pair = self.buffer[1:21]\n        elif len(self.pair) == 20 and self.buffer[0]\
      \ == 2:\n            self.pair += self.buffer[1:21]\n\n        if len(self.pair)\
      \ == 40 and self.pair != self.last_pair:\n            rolling, fixed = secplus.decode(self.pair)\n\
      \            print(secplus.pretty(rolling, fixed))\n            self.last_pair\
      \ = self.pair\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate // decim1 // decim2
    threshold: threshold
  states:
    _io_cache: ('Security+ Decoder', 'blk', [('samp_rate', '10000'), ('threshold',
      '0.02')], [('0', 'float', 1)], [], 'Decoder for Chamberlain garage door openers',
      ['samp_rate', 'threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 276.0]
    rotation: 180
    state: enabled
- name: secplus_v2_decode
  id: epy_block
  parameters:
    _source_code: "#\n# Copyright 2020 Clayton Smith (argilo@gmail.com)\n#\n# This\
      \ file is part of secplus.\n#\n# secplus is free software: you can redistribute\
      \ it and/or modify\n# it under the terms of the GNU General Public License as\
      \ published by\n# the Free Software Foundation, either version 3 of the License,\
      \ or\n# (at your option) any later version.\n#\n# secplus is distributed in\
      \ the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even\
      \ the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\
      \  See the\n# GNU General Public License for more details.\n#\n# You should\
      \ have received a copy of the GNU General Public License\n# along with secplus.\
      \  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport numpy as np\nfrom\
      \ gnuradio import gr\nimport secplus\n\n\nclass blk(gr.sync_block):\n    \"\"\
      \"Decoder for Chamberlain garage door openers\"\"\"\n\n    def __init__(self,\
      \ samp_rate=10000, threshold=0.02):\n        gr.sync_block.__init__(\n     \
      \       self,\n            name='Security+ 2.0 Decoder',\n\n            in_sig=[np.float32],\n\
      \            out_sig=[]\n        )\n        self.samp_rate = samp_rate\n   \
      \     self.threshold = threshold\n        self.last_sample = 0.0\n        self.last_edge\
      \ = 0\n        self.buffer = []\n        self.last_pair = []\n        self.pair\
      \ = []\n\n    def work(self, input_items, output_items):\n        for n, sample\
      \ in enumerate(input_items[0]):\n            current_sample = self.nitems_read(0)\
      \ + n\n            if self.last_sample < self.threshold <= sample:\n       \
      \         # rising edge\n                self.process_edge(True, current_sample\
      \ - self.last_edge)\n                self.last_edge = current_sample\n     \
      \       elif self.last_sample >= self.threshold > sample:\n                #\
      \ falling edge\n                self.process_edge(False, current_sample - self.last_edge)\n\
      \                self.last_edge = current_sample\n            if current_sample\
      \ - self.last_edge >= 0.625e-3 * self.samp_rate:\n                self.buffer.append(0)\n\
      \                self.buffer.append(0)\n                self.process_buffer()\n\
      \                self.buffer = []\n            self.last_sample = sample\n \
      \       return len(input_items[0])\n\n    def process_edge(self, rising, samples):\n\
      \        if samples < 0.125e-3 * self.samp_rate:\n            self.buffer =\
      \ []\n        elif samples < 0.375e-3 * self.samp_rate:\n            self.buffer.append(0\
      \ if rising else 1)\n        elif samples < 0.625e-3 * self.samp_rate:\n   \
      \         self.buffer.append(0 if rising else 1)\n            self.buffer.append(0\
      \ if rising else 1)\n        else:\n            self.buffer = []\n\n    def\
      \ process_buffer(self):\n        manchester = \"\".join(str(b) for b in self.buffer)\n\
      \        start = manchester.find(\"1010101010101010101010101010101001010101\"\
      )\n        if start == -1:\n            return\n\n        if manchester[start+44:start+48]\
      \ == \"1010\":\n            packet_length = 40\n        elif manchester[start+44:start+48]\
      \ == \"1001\":\n            packet_length = 64\n        else:\n            return\n\
      \n        manchester = manchester[start:start+44+(packet_length*2)]\n      \
      \  baseband = []\n        for i in range(0, len(manchester), 2):\n         \
      \   if manchester[i:i+2] == \"01\":\n                baseband.append(1)\n  \
      \          elif manchester[i:i+2] == \"10\":\n                baseband.append(0)\n\
      \            else:\n                return\n\n        if baseband[20:22] ==\
      \ [0, 0]:\n            self.pair = baseband[22:]\n        elif baseband[20:22]\
      \ == [0, 1] and len(self.pair) == packet_length:\n            self.pair += baseband[22:]\n\
      \n        if len(self.pair) == packet_length*2 and self.pair != self.last_pair:\n\
      \            try:\n                rolling, fixed, data = secplus.decode_v2(self.pair)\n\
      \                print(secplus.pretty_v2(rolling, fixed, data))\n          \
      \      self.last_pair = self.pair\n            except ValueError:\n        \
      \        pass\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate // decim1 // decim2
    threshold: threshold
  states:
    _io_cache: ('Security+ 2.0 Decoder', 'blk', [('samp_rate', '10000'), ('threshold',
      '0.02')], [('0', 'float', 1)], [], 'Decoder for Chamberlain garage door openers',
      ['samp_rate', 'threshold'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [560, 348.0]
    rotation: 180
    state: enabled

connections:
- [blocks_complex_to_mag_0, '0', rational_resampler_xxx_1, '0']
- [blocks_rotator_cc_0, '0', rational_resampler_xxx_0, '0']
- [osmosdr_source_0, '0', blocks_rotator_cc_0, '0']
- [rational_resampler_xxx_0, '0', blocks_complex_to_mag_0, '0']
- [rational_resampler_xxx_1, '0', qtgui_time_sink_x_0, '0']
- [rational_resampler_xxx_1, '0', secplus_decode, '0']
- [rational_resampler_xxx_1, '0', secplus_v2_decode, '0']

metadata:
  file_format: 1
  grc_version: 3.10.5.0
